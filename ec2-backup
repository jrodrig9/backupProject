#!/usr/bin/env python

import sys
import getopt
import os
import math
import subprocess

def errorMsg(msg):
    sys.stderr.write("ERROR - " + str(msg) + "\n")
    sys.exit(1)

verbose = os.environ.get("EC2_BACKUP_VERBOSE")

def verboseMsg(msg):
    if verbose and msg:
        print "Step - " +  msg

def existsDir(directory):
    return os.path.exists(directory) and os.path.isdir(directory)

#This function was taken from http://stackoverflow.com/questions/1392413/calculating-a-directory-size-using-python
def getDirSize(directory):
    size = 0
    for dirPath, dirNames, fileNames in os.walk(directory):
        for f in fileNames:
            filePointer = os.path.join(dirPath, f)
            size += os.path.getsize(filePointer)
    return size

def bytesToGB(size):
    return size/(1024*1024*1024)+1

def getAvailZone(availability):
    if(availability):
        for i in range(len(availability)):
            if availability[i+2] == "available":
                return availability[i+3]
            i += 4
    return "None"

def getZone(availability):
    if(availability):
        for i in range(len(availability)):
            if availability[i+2] == "available":
                return availability[i+1]
            i += 4
    return "None"

def availToZone(availZone):
    if (availZone):
        splitString = availZone.split('-')
        zone = '-'
        sequence = (splitString[0], splitString[1], splitString[2][0])
        zone = zone.join(sequence)
        return zone
    return "None"

def dd(hostname, directory):
	# status = subprocess.check_output("dd if="+directory+"| gzip -1 - | ssh fedora@"+ hostname+" dd of=image.tar", shell=True)

	status = subprocess.call("tar cf " + directory + ".tar " + directory, shell=True)

	if status == 0:
		status = subprocess.call("dd if=" + directory + ".tar | ssh fedora@" + hostname +" dd of=" + directory".tar", shell=True)
		if status == 0:
			print "Transfer complete!"
	else:
		print "Something went wrong with the tar process. Do you have enough free disk space?"

def main(argv):
     method = ''
     volumeId = ''
     directory = ''
     try:
          opts, args = getopt.getopt(argv, "-hm:v:")
     except getopt.GetoptError:
         errorMsg("Usage: ec2-backup [-h] [-m method] [-v volume-id] dir")
     if len(args) < 1:
         errorMsg("Usage: ec2-backup [-h] [-m method] [-v volume-id] dir")
     for opt, arg in opts:
          if opt == "-h":
               print "Usage: ec2-backup [-h] [-m method] [-v volume-id] dir"
               sys.exit(0)
          elif opt == "-m":
               method = arg
               if (method != "dd" and  method != "rsync"):
                   errorMsg("The given method is not valid, please use either dd or rsync")
               verboseMsg("Retrieved method option") 
          elif opt == "-v":
               volumeId = arg
               verboseMsg("Retrieved volumedId option")
     directory = args[0]
     if not(existsDir(directory)):
         errorMsg("The given directory does not exist: "+args[0])
     verboseMsg("Checked whether directory exists")
     volumeSize = bytesToGB(getDirSize(directory))
     verboseMsg("Calculated that volume size needs to be " + str(volumeSize) + "GB")
     if (not(volumeId)):
         availability = subprocess.check_output("aws ec2 describe-availability-zones", shell=True)
         availability = availability.split()
         availZone = getAvailZone(availability)
         zone = getZone(availability)
         verboseMsg("Retrieved avalailability zone to be: " + availZone + " and region to be: " + zone)

     else:
         try:
             availability = subprocess.check_output("aws ec2 describe-volumes --volume-ids "+volumeId, shell=True)
         except subprocess.CalledProcessError as e:
             errorMsg("The volume provided is not valid!")
         availability = availability.rsplit()
         availZone = availability[1]
         zone = availToZone(availZone)
         verboseMsg("The volume you provided is available at: " + availZone + " and is from the region: " + zone) 
     if ( availZone == "None" or zone == "None"):
         errorMsg("Problem retrieving a zone, is your [default zone] set on .aws/config?")
     
     #The amis for all instances are in a dictionary bellow: (all fedora intances)
     amis = { 
         'us-east-1': 'ami-84db39ed',  
         'us-west-2':  'ami-080f9038',
         'us-west-1': 'ami-3d3a6b78',
         'eu-west-1': 'ami-13042f67',
         'eu-central-1': 'ami-147c4109',
         'ap-northeast-1': 'ami-038d6603',
         'ap-southeast-2': 'ami-01e6963b',
         'ap-southeast-1': 'ami-83f58ad1',
         'sa-east-1': 'ami-056ecf18',
         }
     awsCall = "aws ec2 run-instances --image-id " + amis[zone] + " " +  os.environ.get("EC2_BACKUP_FLAGS_AWS")
     try: 
         instanceInfo = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
         errorMsg(e)
     instanceInfo = instanceInfo.split()
     verboseMsg("Created a new AWS instance with id of: " + instanceInfo[9])
     awsCall = ("aws ec2 describe-instances --instance-ids " + instanceInfo[9])
     dns = 'None'
     verboseMsg("Waiting for instance to start running...")
     while dns == "None":
         try:
             dns = subprocess.check_output(awsCall, shell=True)
         except subprocess.CalledProcessError as e:
             errorMsg(e)
         dns = dns.split()
         dns = dns[17]
     verboseMsg("Retrieved DNS-Name as: " + dns)
         
     sys.exit(0)

main(sys.argv[1:])
