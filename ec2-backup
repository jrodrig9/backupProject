#!/usr/bin/env python

import sys
import getopt
import os
import math
import subprocess

def errorMsg(msg):
    sys.stderr.write("ERROR - " + str(msg) + "\n")
    sys.exit(1)

verbose = os.environ.get("EC2_BACKUP_VERBOSE")
sshFlags = os.environ.get("EC2_BACKUP_FLAGS_SSH")
mountDir = "/mnt/backup"

def verboseMsg(msg):
    if verbose and msg:
        print "Step - " +  msg

def existsDir(directory):
    return os.path.exists(directory) and os.path.isdir(directory)

#This function was taken from http://stackoverflow.com/questions/1392413/calculating-a-directory-size-using-python
def getDirSize(directory):
    size = 0
    for dirPath, dirNames, fileNames in os.walk(directory):
        for f in fileNames:
            filePointer = os.path.join(dirPath, f)
            size += os.path.getsize(filePointer)
    return size

def bytesToGB(size):
    return size/(1024*1024*1024)+1

def getAvailZone(availability):
    if(availability):
        for i in range(len(availability)):
            if availability[i+2] == "available":
                return availability[i+3]
            i += 4
    return "None"

def getZone(availability):
    if(availability):
        for i in range(len(availability)):
            if availability[i+2] == "available":
                return availability[i+1]
            i += 4
    return "None"

def availToZone(availZone):
    if (availZone):
        splitString = availZone.split('-')
        zone = '-'
        sequence = (splitString[0], splitString[1], splitString[2][0])
        zone = zone.join(sequence)
        return zone
    return "None"

def dd(hostname, directory):
	# status = subprocess.check_output("dd if="+directory+"| gzip -1 - | ssh fedora@"+ hostname+" dd of=image.tar", shell=True)
   try:
       status = subprocess.check_output("tar -cf backup.tar " + directory + " | ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null " + sshFlags + " root@" + hostname + " \"dd of=/dev/sdf/ bs=64k conv=block\"", shell=True)
   except getopt.GetoptError as e:
       errorMsg(e)
   verboseMsg("Transfer complete!")

# def dd(hostname, directory):
#     # status = subprocess.check_output("dd if="+directory+"| gzip -1 - | ssh fedora@"+ hostname+" dd of=image.tar", shell=True)
#     status = subprocess.call("tar cf " + directory + ".tar " + directory, shell=True)

#     if status == 0:
#         status = subprocess.call("dd if=" + directory + ".tar | ssh fedora@" + hostname +" dd of=" + directory+".tar", shell=True)
#         if status == 0:
#             verboseMsg("Transfer complete!")
#         else:
#             errorMsg( "Something went wrong with the tar process. Do you have enough free disk space?")

def rsync(hostname, directory):
    try:
	status = subprocess.check_output("rsync -e \"ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null " + sshFlags + "\" -avRz " + directory + " root@" + hostname + ":/dev/sdf/", shell=True)
    except getopt.GetoptError as e:
        errorMsg(e)
    verboseMsg("Transfer complete!")

def main(argv):
     method = ''
     volumeId = ''
     directory = ''
     #Argument Parsing:
     try:
          opts, args = getopt.getopt(argv, "-hm:v:")
     except getopt.GetoptError:
         errorMsg("Usage: ec2-backup [-h] [-m method] [-v volume-id] dir")
     if len(args) < 1:
         errorMsg("Usage: ec2-backup [-h] [-m method] [-v volume-id] dir")
     for opt, arg in opts:
          if opt == "-h":
               print "Usage: ec2-backup [-h] [-m method] [-v volume-id] dir"
               sys.exit(0)
          elif opt == "-m":
               method = arg
               if (method != "dd" and  method != "rsync"):
                   errorMsg("The given method is not valid, please use either dd or rsync")
               verboseMsg("Retrieved method option") 
          elif opt == "-v":
               volumeId = arg
               verboseMsg("Retrieved volumedId option")
     directory = args[0]
     #Check for directory existance
     if not(existsDir(directory)):
         errorMsg("The given directory does not exist: "+args[0])
     verboseMsg("Checked whether directory exists")
     volumeSize = bytesToGB(getDirSize(directory))
     verboseMsg("Calculated that volume size needs to be " + str(volumeSize) + "GB")
     #Decide whether to create a new instance or use the provided one
     if (not(volumeId)):
         #create a new instance in the zones available to the user
         availability = subprocess.check_output("aws ec2 describe-availability-zones", shell=True)
         availability = availability.split()
         availZone = getAvailZone(availability)
         zone = getZone(availability)
         verboseMsg("Retrieved avalailability zone to be: " + availZone + " and region to be: " + zone)
         awsCall = "aws ec2 create-volume --size " + str(volumeSize) + " --region " + zone + " --availability-zone " + availZone
         #Try to create a new volume
         try:
             volumeInfo = subprocess.check_output(awsCall, shell=True)
         except subprocess.CalledProcessError as e:
             errorMsg(e)
         volumeInfo = volumeInfo.split()
         volumeId = volumeInfo[5]
         verboseMsg("Created a new volume with ID of : " + volumeId)
         isVolumeReady = ""
         awsCall = "aws ec2 describe-volumes --volume-ids " + volumeId
         verboseMsg("Waiting for volume to be available")
         #Wait until the volume is available
         while isVolumeReady != "available":
              try:
                  isVolumeReady = subprocess.check_output(awsCall, shell=True)
              except subprocess.CalledProcessError as e:
                  errorMsg(e)
              isVolumeReady = isVolumeReady.split()
              isVolumeReady = isVolumeReady[5]
         verboseMsg("Volume is ready to go!")
         
     else:
         #If the user provided their own volume, check if it is valid
         try:
             availability = subprocess.check_output("aws ec2 describe-volumes --volume-ids "+volumeId, shell=True)
         except subprocess.CalledProcessError as e:
             errorMsg("The volume provided is not valid!")
         availability = availability.rsplit()
         availZone = availability[1]
         zone = availToZone(availZone)
         verboseMsg("The volume you provided is available at: " + availZone + " and is from the region: " + zone) 
     #If there is a problem with the zones, show an error message
     if ( availZone == "None" or zone == "None"):
         errorMsg("Problem retrieving a zone, is your [default zone] set on .aws/config?")
     
     #The amis for all instances are in a dictionary bellow: (all fedora intances)
     amis = { 
         'us-east-1': 'ami-84db39ed',  
         'us-west-2':  'ami-080f9038',
         'us-west-1': 'ami-3d3a6b78',
         'eu-west-1': 'ami-13042f67',
         'eu-central-1': 'ami-147c4109',
         'ap-northeast-1': 'ami-038d6603',
         'ap-southeast-2': 'ami-01e6963b',
         'ap-southeast-1': 'ami-83f58ad1',
         'sa-east-1': 'ami-056ecf18',
         }
     #Create a new instance
     awsCall = "aws ec2 run-instances --image-id " + amis[zone] + " --placement AvailabilityZone=" + availZone + " " +  os.environ.get("EC2_BACKUP_FLAGS_AWS")
     try: 
         instanceInfo = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
         errorMsg(e)
     instanceInfo = instanceInfo.split()
     instId = instanceInfo[9]
     verboseMsg("Created a new AWS instance with id of: " + instId)
     awsCall = ("aws ec2 describe-instances --instance-ids " + instId)
     dns = 'None'
     instState = "None"
     verboseMsg("Waiting for instance to start running...")
     #Wait for instance to become available
     while instState != "running":
         try:
             dns = subprocess.check_output(awsCall, shell=True)
         except subprocess.CalledProcessError as e:
             errorMsg(e)
         dns = dns.split()
         instState = dns[-1]
         dns = dns[17]
        # print instState
     verboseMsg("Retrieved DNS-Name as: " + dns)
     #wait until instance is ready to ssh
     isReady = "None"
     awsCall = "aws ec2 describe-instance-status --instance-ids " + instId
     verboseMsg("waiting until the instance has been fully initialized...")
     while isReady != "ok":
         try:
             status = subprocess.check_output(awsCall, shell=True)
         except subprocess.CalledProcessError as e:
             isReady = False;
         isReady = status.split()
         isReady = isReady[7]
     verboseMsg("Instance is fully initialized, attaching volume to it")
     #Attach volume to instance
     awsCall = "aws ec2 attach-volume --volume-id " + volumeId + " --instance-id " + instId + " --device /dev/sdf"
     try:
         attachInfo = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
         errorMsg(e)
     #wait until attachment is complete
     attachComplete = ""
     awsCall = "aws ec2 describe-volumes --volume-ids " + volumeId
     verboseMsg("Waiting for attachment to be completed")
     while attachComplete != "attached":
         try:
             attachComplete = subprocess.check_output(awsCall, shell=True)
         except subprocess.CalledProcessError as e:
             errorMsg(e)
         attachComplete = attachComplete.split()
         attachComplete = attachComplete[13]            
     #mount volume
     awsCall = "ssh " + sshFlags + "-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null root@" + dns + " \"mkdir " + mountDir + " 2>/dev/null \""
     try:
        status = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
        errorMsg(e)
     awsCall = "ssh " + sshFlags + "-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null root@" + dns + " \"mkfs.ext3 /dev/sdf 1>/dev/null 2>/dev/null\""
     try:
        status = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
        errorMsg(e)
     awsCall = "ssh " + sshFlags + "-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null root@" + dns + " \"mount /dev/sdf " + mountDir + "\""
     try:
        status = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
        errorMsg(e)

     #perform backup
     if (method == 'rsync'):
         verboseMsg("perfoming rsync backup")
         rsync(dns, directory)
     else:
         verboseMsg("Starting dd backup")
         dd(dns, directory)
     #detach volume from instance
     awsCall = "aws ec2 detach-volume --volume-id " + volumeId
     try: 
         detachStats = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
         errorMsg(e)
     verboseMsg("Detached volume from instance")
     #terminate instance
     awsCall = "aws ec2 terminate-instances --instance-ids " + instId
     try:
         terminateInst = subprocess.check_output(awsCall, shell=True)
     except subprocess.CalledProcessError as e:
         errorMsg(e)
     verboseMsg("Terminated the instance created")
     
    #Print the volume Id used and exit with a 0 status
     print volumeId
     sys.exit(0)

main(sys.argv[1:])
